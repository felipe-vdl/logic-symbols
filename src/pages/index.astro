---
import SymbolList, {
  type SymbolListProps,
} from "../components/SymbolList.astro";
const symbols: SymbolListProps[] = [
  {
    title: "Matemática",
    symbols: [
      { description: "mais", symbol: "+" },
      { description: "menos", symbol: "-" },
      { description: "mais ou menos", symbol: "±" },
      { description: "menos ou mais", symbol: "∓" },
      { description: "divisão", symbol: "÷" },
      { description: "percentual", symbol: "%" },
      { description: "multiplicação", symbol: "×" },
      { description: "bullet", symbol: "∙" },
      { description: "asterisco", symbol: "*" },
      { description: "raiz", symbol: "√" },
      { description: "fatorial", symbol: "!" },
      { description: "maior que", symbol: ">" },
      { description: "muito maior que", symbol: "⋙" },
      { description: "menor que", symbol: "<" },
      { description: "muito menor que", symbol: "⋘" },
      { description: "equivalente", symbol: "≡" },
      { description: "não equivalente", symbol: "≢" },
      { description: "somatório", symbol: "∑" },
      { description: "produtório", symbol: "∏" },
      { description: "função", symbol: "ƒ" },
      { description: "infinito", symbol: "∞" },
      { description: "Pi = 3.141592", symbol: "π" },
      { description: "Napier = 2,718281", symbol: "e" },
      { description: "Nº de Ouro = 1.618", symbol: "φ" },
      { description: "valor absoluto", symbol: "| |" },
      { description: "norma", symbol: "|| ||" },
      { description: "integral", symbol: "∫" },
      { description: "derivada", symbol: "f'" },
      { description: "EDP", symbol: "∂" },
      { description: "nabla", symbol: "∇" },
      { description: "números naturais", symbol: "ℕ" },
      { description: "números inteiros", symbol: "ℤ" },
      { description: "números reais", symbol: "ℝ" },
      { description: "números racionais", symbol: "ℚ" },
      { description: "números complexos", symbol: "ℂ" },
    ],
  },
  {
    title: "Lógica",
    symbols: [
      { description: "para todo", symbol: "∀" },
      { description: "existe", symbol: "∃" },
      { description: "existe exatamente um", symbol: "∃!" },
      { description: "não existe", symbol: "∄" },
      { description: "tal que", symbol: "|" },
      { description: "negação", symbol: "¬" },
      { description: "igual", symbol: "=" },
      { description: "não igual", symbol: "≠" },
      { description: "aproximadamente", symbol: "≈" },
      { description: "e", symbol: "∧" },
      { description: "ou", symbol: "∨" },
      { description: "xor", symbol: "⊕" },
      { description: "se, então", symbol: "⇒" },
      { description: "se, e somente se", symbol: "⇔" },
      { description: "definição", symbol: "≡" },
      { description: "tautologia", symbol: "⊤" },
      { description: "contradição", symbol: "⊥" },
      { description: "deduz que", symbol: "⊢" },
      { description: "não deduz que", symbol: "⊬" },
      { description: "acarreta", symbol: "⊨" },
      { description: "não acarreta", symbol: "⊭" },
      { description: "é necessário que", symbol: "□" },
      { description: "portanto", symbol: "∴" },
    ],
  },
  {
    title: "Conjuntos",
    symbols: [
      { description: "pertence", symbol: "∈" },
      { description: "não pertence", symbol: "∉" },
      { description: "contém", symbol: "∋" },
      { description: "não contém", symbol: "∌" },
      { description: "união", symbol: "⋃" },
      { description: "interseção", symbol: "⋂" },
      { description: "complemento", symbol: "∁" },
      { description: "nulo", symbol: "∅" },
      { description: "subconjunto de", symbol: "⊂" },
      { description: "superconjunto de", symbol: "⊃" },
      { description: "não subconjunto de", symbol: "⊄" },
      { description: "não superconjunto de", symbol: "⊅" },
      { description: "subconjunto de, ou igual", symbol: "⊆" },
      { description: "superconjunto de, ou igual", symbol: "⊇" },
      { description: "nem subconjunto, nem igual", symbol: "⊈" },
      { description: "nem superconjunto, nem igual", symbol: "⊉" },
      { description: "subconjunto de, e não igual", symbol: "⊊" },
      { description: "superconjunto de, e não igual", symbol: "⊋" },
    ],
  },
  {
    title: "Alfabeto Grego",
    symbols: [
      { description: "alfa", symbol: "α" },
      { description: "beta", symbol: "β" },
      { description: "gamma", symbol: "Γ" },
      { description: "delta", symbol: "Δ" },
      { description: "epsilon", symbol: "ε" },
      { description: "zeta", symbol: "ζ" },
      { description: "eta", symbol: "η" },
      { description: "theta", symbol: "θ" },
      { description: "iota", symbol: "ι" },
      { description: "kappa", symbol: "κ" },
      { description: "lambda", symbol: "κ" },
      { description: "mu", symbol: "μ" },
      { description: "nu", symbol: "ν" },
      { description: "xi", symbol: "Ξ" },
      { description: "ômicron", symbol: "ο" },
      { description: "pi", symbol: "π" },
      { description: "rho", symbol: "ρ" },
      { description: "sigma", symbol: "Σ" },
      { description: "tau", symbol: "τ" },
      { description: "upsilon", symbol: "υ" },
      { description: "phi", symbol: "φ" },
      { description: "chi", symbol: "χ" },
      { description: "psi", symbol: "ψ" },
      { description: "omega", symbol: "Ω" },
    ]
  }
];
---

<html lang="pt-br">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Símbolos</title>
  </head>
  <body
    class="bg-dark-1 text-light-1 flex flex-col items-center min-h-svh relative"
  >
    <div
      class="absolute inset-0 bg-radial from-neutral-800/60 from-70% to-transparent -z-50"
    >
    </div>
    <main class="grid sm:grid-cols-1 md:grid-cols-2 container p-6 gap-6 flex-1">
      {
        symbols.map((item) => (
          <SymbolList title={item.title} symbols={item.symbols} />
        ))
      }
    </main>
    <div
      class="bg-dark-1 toast border-2 border-dark-3 py-[6px] px-8 text-light-3 rounded-md fixed bottom-7"
    >
      Copied to clipboard!
    </div>
  </body>
</html>
<script is:inline>
  let id = undefined;

  const copyToClipboard = (symbol) => {
    const copyText = document.createElement("input");
    copyText.type = "text";
    copyText.value = symbol;
    copyText.select();
    copyText.setSelectionRange(0, 99999);
    navigator.clipboard.writeText(symbol);

    document.querySelector(".toast").classList.add("toast-enter");
    console.log(document.querySelector(".toast"));
    document.activeElement.blur();

    clearTimeout(id);
    id = setTimeout(() => {
      document.querySelector(".toast").classList.remove("toast-enter");
    }, 1500);
  };
</script>
<style>
  /* html {
    cursor: url("./gato-grande.jpg"), pointer;
  }

  html:active {
    cursor: url("./gato-click.jpg"), pointer;
  } */

  .toast {
    opacity: 0;
    visibility: hidden;
    transform: translateY(8px);
    transition: transform 150ms;
  }
  .toast-enter {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }
</style>
